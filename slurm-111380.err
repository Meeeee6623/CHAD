/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/huggingface_hub/file_download.py:896: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
/home/pl217/continualearning/model.py:636: UserWarning: Weight loading missing non-Hopfield keys: ['out_head.weight']
  if missing: warnings.warn(f"Weight loading missing non-Hopfield keys: {missing}")
/home/pl217/continualearning/model.py:266: UserWarning: Error assigning sampled embeddings (shape mismatch?): shape '[24, 256, 128]' is invalid for input of size 18874368. Falling back to random.
  warnings.warn(f"Error assigning sampled embeddings (shape mismatch?): {e}. Falling back to random.")
/home/pl217/continualearning/data_loader.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self._processed_data = torch.load(self.cache_path)
Traceback (most recent call last):
  File "/home/pl217/continualearning/train.py", line 517, in <module>
    train(config_file)
  File "/home/pl217/continualearning/train.py", line 308, in train
    model, optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(
                                                                        ^^^^^^^^^^^^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/accelerate/accelerator.py", line 1446, in prepare
    result = tuple(
             ^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/accelerate/accelerator.py", line 1447, in <genexpr>
    self._prepare_one(obj, first_pass=True, device_placement=d) for obj, d in zip(args, device_placement)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/accelerate/accelerator.py", line 1289, in _prepare_one
    return self.prepare_model(obj, device_placement=device_placement)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/accelerate/accelerator.py", line 1573, in prepare_model
    model = model.to(self.device)
            ^^^^^^^^^^^^^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1340, in to
    return self._apply(convert)
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 900, in _apply
    module._apply(fn)
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 900, in _apply
    module._apply(fn)
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 900, in _apply
    module._apply(fn)
  [Previous line repeated 4 more times]
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 927, in _apply
    param_applied = fn(param)
                    ^^^^^^^^^
  File "/home/pl217/miniconda3/envs/simpler_env/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1326, in convert
    return t.to(
           ^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 48.00 MiB. GPU 0 has a total capacity of 44.52 GiB of which 44.50 MiB is free. Process 2628526 has 38.08 GiB memory in use. Including non-PyTorch memory, this process has 6.39 GiB memory in use. Of the allocated memory 5.93 GiB is allocated by PyTorch, and 45.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
